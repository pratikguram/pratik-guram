import numpy as np 
import pandas as pd 

#For plotting
from matplotlib import pyplot as plt
import seaborn as sns
%matplotlib inline
 
vg_df = pd.read_csv('/Users/pratikguram/Downloads/Video_Games_Sales_as_at_22_Dec_2016 2.csv')
print('This dataset has ' + str(vg_df.shape[0]) + ' rows, and ' + str(vg_df.shape[1]) + ' columns')
vg_df.head(7)
vg_df.describe()
sns.distplot(vg_df.Year_of_Release.dropna(), kde=False, bins = 39);
Global_Salesfig, axs = plt.subplots(ncols = 4, figsize=(13, 4))

sns.distplot(vg_df.Global_Sales.dropna(), kde=False, ax=axs[0])
second_plt = sns.distplot(vg_df.Global_Sales.dropna()[vg_df.Global_Sales > 2], kde=False, ax=axs[1])
sns.boxplot(vg_df.Global_Sales, ax=axs[2], orient = 'v')
sns.boxplot(vg_df.Global_Sales, ax=axs[3], orient = 'v', showfliers=False)

second_plt.set_yscale('log')
Global_Salesfig, axs = plt.subplots(ncols = 4, figsize=(13, 4))

sns.distplot(vg_df.NA_Sales.dropna(), kde=False, ax=axs[0])
second_plt = sns.distplot(vg_df.NA_Sales.dropna()[vg_df.NA_Sales > 1], kde=False, ax=axs[1])
sns.boxplot(vg_df.NA_Sales, ax=axs[2], orient = 'v')
sns.boxplot(vg_df.NA_Sales, ax=axs[3], orient = 'v', showfliers=False)

second_plt.set_yscale('log')
Global_Salesfig, axs = plt.subplots(ncols = 4, figsize=(13, 4))

sns.distplot(vg_df.EU_Sales.dropna(), kde=False, ax=axs[0])
second_plt = sns.distplot(vg_df.EU_Sales.dropna()[vg_df.EU_Sales > 1], kde=False, ax=axs[1])
sns.boxplot(vg_df.EU_Sales, ax=axs[2], orient = 'v')
sns.boxplot(vg_df.EU_Sales, ax=axs[3], orient = 'v', showfliers=False)

second_plt.set_yscale('log')
Global_Salesfig, axs = plt.subplots(ncols = 4, figsize=(13, 4))

sns.distplot(vg_df.JP_Sales.dropna(), kde=False, ax=axs[0])
second_plt = sns.distplot(vg_df.JP_Sales.dropna()[vg_df.JP_Sales > 1], kde=False, ax=axs[1])
sns.boxplot(vg_df.JP_Sales, ax=axs[2], orient = 'v')
sns.boxplot(vg_df.JP_Sales, ax=axs[3], orient = 'v', showfliers=False)

second_plt.set_yscale('log')
Global_Salesfig, axs = plt.subplots(ncols = 4, figsize=(13, 4))

sns.distplot(vg_df.Other_Sales.dropna(), kde=False, ax=axs[0])
second_plt = sns.distplot(vg_df.Other_Sales.dropna()[vg_df.Other_Sales > 1], kde=False, ax=axs[1])
sns.boxplot(vg_df.Other_Sales, ax=axs[2], orient = 'v')
sns.boxplot(vg_df.Other_Sales, ax=axs[3], orient = 'v', showfliers=False)

second_plt.set_yscale('log')
plt.figure(figsize=(13, 4))
sns.countplot(vg_df.Platform.dropna(), order = vg_df.Platform.value_counts().index);
platform_after_2000 = vg_df.loc[(vg_df.Platform == 'PS2') | (vg_df.Platform == 'XB') | (vg_df.Platform == 'GC'),:]
platform_after_2000 = platform_after_2000.groupby(['Platform']).agg(np.sum)

ax = sns.heatmap(platform_after_2000.iloc[:, 1:5])
ax.set_yticklabels(['XBOX', 'PS2', 'Game Cube'])
ax.set_xticklabels(['NA Sales', 'EU Sales', 'JP Sales', 'Other Sales'])
ax.set_xlabel('Region Sales', size=25, color='blue', alpha=0.5)
ax.set_ylabel('Platform', size=25, color='blue', alpha=0.5)
platform_after_2000_2009 = vg_df.loc[((vg_df.Platform == 'PS2') | (vg_df.Platform == 'XB') | (vg_df.Platform == 'GC')) & 
                                     ((vg_df.Year_of_Release >= 2001) & (vg_df.Year_of_Release <= 2009)),:]
platform_after_2000_2009 = platform_after_2000_2009.groupby(['Platform']).agg(np.sum)

ax = sns.heatmap(platform_after_2000_2009.iloc[:, 1:5])
ax.set_yticklabels(['XBOX', 'PS2', 'Game Cube'])
ax.set_xticklabels(['NA Sales', 'EU Sales', 'JP Sales', 'Other Sales'])
ax.set_xlabel('Region Sales', size=25, color='blue', alpha=0.5)
ax.set_ylabel('Platform', size=25, color='blue', alpha=0.5)

platform_after_2000 = vg_df.loc[(vg_df.Platform == 'PS2') | (vg_df.Platform == 'DS') | (vg_df.Platform == 'PS3'),:]
platform_after_2000 = platform_after_2000.groupby(['Platform']).agg(np.sum)

ax = sns.heatmap(platform_after_2000.iloc[:, 1:5])
ax.set_yticklabels(['DS', 'PS2', 'PS3'])
ax.set_xticklabels(['NA Sales', 'EU Sales', 'JP Sales', 'Other Sales'])
ax.set_xlabel('Region Sales', size=25, color='blue', alpha=0.5)
ax.set_ylabel('Platform', size=25, color='blue', alpha=0.5)
platform_after_2000 = vg_df.loc[(vg_df.Platform == 'X360') | (vg_df.Platform == '3DS') | (vg_df.Platform == 'PC'),:]
platform_after_2000 = platform_after_2000.groupby(['Platform']).agg(np.sum)

ax = sns.heatmap(platform_after_2000.iloc[:, 1:5])
ax.set_yticklabels(['3DS', 'X360', 'PC'])
ax.set_xticklabels(['NA Sales', 'EU Sales', 'JP Sales', 'Other Sales'])
ax.set_xlabel('Region Sales', size=25, color='blue', alpha=0.5)
ax.set_ylabel('Platform', size=25, color='blue', alpha=0.5)
plt.figure(figsize=(13, 4))
sns.countplot(vg_df.Genre.dropna(), order = vg_df.Genre.value_counts().index);
plt.figure(figsize=(13, 4))
sns.countplot(vg_df.Developer.dropna(), order = vg_df.Developer.value_counts().index);
plt.figure(figsize=(13, 4))
sns.countplot(vg_df.Developer.dropna(), order = vg_df.Developer.value_counts().iloc[:40].index)
plt.xticks(rotation=90);
vg_df = pd.read_csv('/Users/pratikguram/Downloads/Video_Games_Sales_as_at_22_Dec_2016 2.csv')
vg_df.User_Score = vg_df.User_Score.convert_objects(convert_numeric=True)
plt.figure(figsize=(12, 8))

vg_corr = vg_df.corr()
sns.heatmap(vg_corr, 
            xticklabels = vg_corr.columns.values,
            yticklabels = vg_corr.columns.values,
            annot = True);
            fig = plt.figure(figsize=(10, 8))

genre_sales_percentages_by_year = (vg_df.groupby(['Year_of_Release', 'Genre']).Global_Sales.sum())*(100)/vg_df.groupby(['Year_of_Release']).Global_Sales.sum()
genre_sales_percentages_by_year.unstack().plot(kind='area',stacked=True, colormap= 'Spectral', grid=False, figsize=(13, 4))

yearlySales = vg_df.groupby(['Year_of_Release','Genre']).Global_Sales.sum()
yearlySales.unstack().plot(kind='area',stacked=True, colormap= 'Spectral', figsize=(15, 5) ) ;
x = vg_df.groupby(['Genre']).sum().copy()
ax = x.Global_Sales.sort_values(ascending=False).plot(kind='bar', figsize=(13, 5));

for p in ax.patches:
    ax.annotate(str( round( p.get_height() ) ) + "\n" + str(round( p.get_height() /89.170) )+ "%", 
                (p.get_x() * 1.007, p.get_height() * 0.75),
                color='black')

#First is the number of releases per genre, second is the sales per genre, third is the average sales per game per genre
genre_difference_metric = [vg_df.Genre.value_counts().index, vg_df.groupby(['Genre']).sum().Global_Sales.sort_values(ascending=False).index, vg_df.groupby(['Genre']).mean().Global_Sales.sort_values(ascending=False).index]

#Dataframe to be used for plotting.
genre_evolution_df = pd.DataFrame(columns=['genre', 'rank_type', 'rank'])

#Populate the dataframe
for metric in range(3):
    for genre in range(len(genre_difference_metric[metric])):
        genre_evolution_df = genre_evolution_df.append({'genre':genre_difference_metric[metric][genre], 'rank_type': metric, 'rank':genre},
                                   ignore_index=True)

        
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111)
sns.pointplot(x=genre_evolution_df.rank_type,
              y=12-genre_evolution_df['rank'], 
              hue=genre_evolution_df.genre)

for i in range(len(genre_difference_metric[0])):
    ax.text(-0.75, 12-i, genre_difference_metric[0][i], fontsize=11)
    ax.text(2.1, 12-i, genre_difference_metric[2][i], fontsize=11)
    
ax.set_xlim([-2,4])

xs = [0.0, 1.0, 2.0]
x_labels = ['total releases', 'total sales', 'average sales']
plt.xticks(xs, x_labels, rotation='vertical')

ax.set_xlabel('Sales Metric')

ys = range(1,13)
y_labels = ['12th', '11th', '10th', '9th', '8th', '7th', '6th', '5th', '4th', '3rd', '2nd', '1st']
plt.yticks(ys, y_labels)
ax.set_ylabel('Genre Rank')

plt.show();
sales_cols = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']
sales_normalised_df = vg_df[sales_cols].apply(lambda x: (x - x.mean()) / (x.max() - x.min()))

sns.regplot(x = sales_normalised_df.Global_Sales, y = sales_normalised_df.NA_Sales,    marker="+")
sns.regplot(x = sales_normalised_df.Global_Sales, y = sales_normalised_df.EU_Sales,    marker=".")
sns.regplot(x = sales_normalised_df.Global_Sales, y = sales_normalised_df.JP_Sales,    marker="x")
sns.regplot(x = sales_normalised_df.Global_Sales, y = sales_normalised_df.Other_Sales, marker="o")

plt.xlim(-0.05, 1.05)
plt.ylim(-0.05, 1.05)
fig.tight_layout();
genre_geo_rankings = [vg_df.groupby('Genre').sum().unstack().NA_Sales.sort_values(ascending=False).index, 
                      vg_df.groupby('Genre').sum().unstack().EU_Sales.sort_values(ascending=False).index,
                      vg_df.groupby('Genre').sum().unstack().Other_Sales.sort_values(ascending=False).index,
                      vg_df.groupby('Genre').sum().unstack().JP_Sales.sort_values(ascending=False).index
                      ]

#First is the number of releases per genre, second is the sales per genre, third is the average sales per game per genre
genre_geo_rank_df = pd.DataFrame(columns=['genre', 'rank_type', 'rank'])

#for metric in genre_difference_metric:
for region in range(4):
    for genre in range(len(genre_geo_rankings[region])):
        genre_geo_rank_df = genre_geo_rank_df.append({'genre':genre_geo_rankings[region][genre], 'rank_type': region, 'rank':genre},
                                   ignore_index=True)
        fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111)

sns.pointplot(x=genre_geo_rank_df.rank_type,
              y=12-genre_geo_rank_df['rank'], 
              hue=genre_geo_rank_df.genre)

for i in range(len(genre_geo_rankings[0])):
    ax.text(-0.9, 12-i, genre_geo_rankings[0][i], fontsize=11)
    ax.text(3.2, 12-i, genre_geo_rankings[3][i], fontsize=11)
    
ax.set_xlim([-2,5])

xs = [0.0, 1.0, 2.0, 3.0]
x_labels = ['North America', 'E.U.', 'Rest of the World', 'Japan']
plt.xticks(xs, x_labels, rotation='vertical')
ax.set_xlabel('Region')

ys = range(1,13)
y_labels = ['12th', '11th', '10th', '9th', '8th', '7th', '6th', '5th', '4th', '3rd', '2nd', '1st']
plt.yticks(ys, y_labels)
ax.set_ylabel('Genre Rank')

plt.show();
x = vg_df.groupby(['Publisher']).sum().Global_Sales.copy()
x.sort_values(ascending=False, inplace=True)
x.head(10)
x = vg_df.groupby(['Publisher']).count().Name.copy()
x.sort_values(ascending=False, inplace=True)
x.head(10)
#http://stackoverflow.com/questions/30328646/python-pandas-group-by-in-group-by-and-average
vg_df.groupby(['Publisher', 'Year_of_Release'], as_index=False).mean().groupby('Publisher').mean().Global_Sales.sort_values(ascending=False).head(10)
vg_df.groupby(['Publisher']).filter(lambda x: len(x) > 5).groupby(['Publisher', 'Year_of_Release'], as_index=False).mean().groupby('Publisher').mean().Global_Sales.sort_values(ascending=False).head(10)
x = vg_df.groupby(['Publisher']).mean().Global_Sales.copy()
x.sort_values(ascending=False, inplace=True)
x.head(10)
vg_df[vg_df.Publisher == 'Palcom']

vg_df.groupby(['Publisher']).filter(lambda x: len(x) > 10).groupby(['Publisher']).Global_Sales.mean().sort_values(ascending=False).head(10)
top_publishers = ['Electronic Arts', 'Activision', 'Namco Bandai Games', 'Ubisoft', 'Konami Digital Entertainment', \
                  'THQ', 'Nintendo', 'Sony Computer Entertainment', 'Sega', 'Take-Two Interactive',
                  'Sony Computer Entertainment Europe', 'Microsoft Game Studios', 'Enix Corporation', 'Bethesda Softworks', 'SquareSoft'\
                  'Take-Two Interactive', 'LucasArts', '989 Studios', 'Hasbro Interactive', 'Universal Interactive']
#You can use set to create the list, I just have handtyped them just to be more attentive to the names.

top_publisher_df = vg_df[ vg_df['Publisher'].isin(top_publishers) ]
print("They make", 100*top_publisher_df.shape[0]/float(vg_df.shape[0]),"% of the number of releases in this dataset")
total_games_sales = vg_df.Global_Sales.sum()
top_publisher_total_sales = top_publisher_df.Global_Sales.sum()

print("Total Video Games Sales:", total_games_sales, "Million US$")
print("Total Top Publishers Sales:", top_publisher_total_sales, "Million US$")
print("They make ", 100*top_publisher_total_sales/total_games_sales,"% of the total video games sales")
x = top_publisher_df.groupby(['Publisher', 'Genre']).count().copy()
x.unstack().Name.idxmax(axis=1)
x = top_publisher_df.groupby(['Publisher', 'Genre']).sum().copy()
x.unstack().Global_Sales.idxmax(axis=1)
x = top_publisher_df.groupby(['Genre', 'Publisher']).count().copy()
x.unstack().Name.idxmax(axis=1)
x = top_publisher_df.groupby(['Genre', 'Publisher']).sum().copy()
x.unstack().Global_Sales.idxmax(axis=1)
x = top_publisher_df.groupby(['Genre', 'Publisher']).mean().copy()
x.unstack().Global_Sales.idxmax(axis=1)
global_sales_publisher = vg_df.pivot_table(index=['Publisher'], values=['NA_Sales','EU_Sales','JP_Sales'], 
                                           aggfunc=np.sum).sort_values(['NA_Sales'], ascending=False)
global_sales_publisher = global_sales_publisher[['NA_Sales','EU_Sales','JP_Sales']]
ax = global_sales_publisher.iloc[0:10,:].plot(kind='bar', stacked=True, grid=False)
ax.set_title('Top 10 Publishers by Sales', size=25, color='blue', alpha=0.5)
ax.set_xlabel('Publisher', size=25, color='green', alpha=0.5)
ax.set_ylabel('Sales', size=25, color='green', alpha=0.5)
ax = vg_df.groupby('Publisher').sum().unstack().NA_Sales.sort_values(ascending=False).head(10).plot(kind='bar', figsize=(13, 5));

for p in ax.patches:
    ax.annotate(str( round( p.get_height() ) ) + "\n" + str(round( 100.0* p.get_height() /vg_df.NA_Sales.sum()) )+ "%", 
                (p.get_x() + 0.13, p.get_height()-85),
                color='white', fontsize=12, fontweight='bold')

vg_df.groupby('Publisher').sum().unstack().EU_Sales.sort_values(ascending=False).head(10).plot(kind='bar');
vg_df.groupby('Publisher').sum().unstack().JP_Sales.sort_values(ascending=False).head(10).plot(kind='bar');

vg_df.groupby('Publisher').sum().unstack().Other_Sales.sort_values(ascending=False).head(10).plot(kind='bar');

vg_df.groupby('Genre').sum().unstack().NA_Sales.sort_values(ascending=False).plot(kind='bar');

vg_df.groupby('Genre').sum().unstack().EU_Sales.sort_values(ascending=False).head(10).plot(kind='bar');

vg_df.groupby('Genre').sum().unstack().JP_Sales.sort_values(ascending=False).head(10).plot(kind='bar');

vg_df.groupby('Genre').sum().unstack().Other_Sales.sort_values(ascending=False).head(10).plot(kind='bar');

vg_df.sort_values('Global_Sales', ascending=False).head(10).Name

x = vg_df.groupby(['Genre', 'Name']).sum().reset_index().groupby('Genre')

best_selling_titles_by_genre_df = pd.DataFrame()

for name, group in x:
    temp_col = group.sort_values('Global_Sales', ascending=False).head(10).Name.reset_index(drop=True)
    best_selling_titles_by_genre_df[name] = temp_col
    best_selling_titles_by_genre_df
    
